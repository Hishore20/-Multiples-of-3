


/*
There are N numbers a[0],a[1]..a[N - 1]. Initally all are 0. You have to perform two types of operations :

1) Increase the numbers between indices A and B by 1. This is represented by the command "0 A B"

2) Answer how many numbers between indices A and B are divisible by 3. This is represented by the command "1 A B".

Input :

The first line contains two integers, N and Q. Each of the next Q lines are either of the form "0 A B" or "1 A B" as mentioned above.

Output :

Output 1 line for each of the queries of the form "1 A B" containing the required answer for the corresponding query.

Sample Input :
4 7
1 0 3
0 1 2
0 1 3
1 0 0
0 0 3
1 3 3
1 0 3

Sample Output :
4
1
0
2

Constraints :
1 <= N <= 100000
1 <= Q <= 100000
0 <= A <= B <= N - 1
Logic Test Case 1

Input (stdin)
4 7

1 0 3

0 1 2

0 1 3

1 0 0

0 0 3

1 3 3

1 0 3

Expected Output

4

1

0

2
Logic Test Case 2

Input (stdin)
0

Expected Output

0

*/











#include <stdio.h>

#define MAXN 100000

int t[MAXN * 4][3];
int p[MAXN * 4];
int u[MAXN * 4];

void build(int i, int l, int r) {
    if (l == r) {
        t[i][0] = 1;
    } else {
        int m = (l + r) / 2;
        build(i * 2, l, m);
        build(i * 2 + 1, m + 1, r);
        t[i][0] = t[i * 2][0] + t[i * 2 + 1][0];
    }
}

void push(int i) {
    p[i * 2] += u[i];
    p[i * 2 + 1] += u[i];
    u[i * 2] += u[i];
    u[i * 2 + 1] += u[i];
    u[i] = 0;
}

void update(int i, int cl, int cr, int tl, int tr, int v) {
    if (cr < tl || cl > tr) {
        return;
    } else if (tl <= cl && cr <= tr) {
        u[i] += v;
        p[i] += v;
    } else {
        int cm = (cl + cr) / 2;
        push(i);
        update(i * 2, cl, cm, tl, tr, v);
        update(i * 2 + 1, cm + 1, cr, tl, tr, v);
      int k;  
      for (k = 0; k < 3; k++) {
            t[i][k] =
                t[i * 2][(k + p[i * 2]) % 3] +
                t[i * 2 + 1][(k + p[i * 2 + 1]) % 3];
            p[i] = 0;
        }
    }
}

int get(int i, int cl, int cr, int tl, int tr) {
    if (cr < tl || cl > tr) {
        return 0;
    } else if (tl <= cl && cr <= tr) {
        return t[i][p[i] % 3];
    } else {
        int cm = (cl + cr) / 2;
        push(i);
        return
            get(i * 2, cl, cm, tl, tr) +
            get(i * 2 + 1, cm + 1, cr, tl, tr);
    }
}

int main() {
    int n, q, t, a, b;
    scanf("%d %d", &n, &q);
    build(1, 0, n - 1);
  int i;
    for (i = 0; i < q; i++) {
        scanf("%d %d %d", &t, &a, &b);
        if (t == 0) {
            update(1, 0, n - 1, a, b, 1);
        } else {
            printf("%d\n", get(1, 0, n - 1, a, b));
        }
    }
    return 0;
}
